package main

import (
	"fmt"
)

func main() {

	// 多重循环控制
	// 打印金字塔 接受整数层数 打印镂空金字塔

	// 分析 编程思路
	// 1、打印一个矩形
	// 2、打印半个金字塔，每层*的个数与层数相等
	// 3、打印整个金字塔
	/*
					*           1层1个   空格 3个单位  一个单位表示一个*所占用的空间，包括前后空格
				  * * *			2层3个   空格 2个单位
				* * * * *		3层5个   空格 1个单位
			  * * * * * * *		4层7个   不空格
	*/
	// 4、将层数做成一个变量
	// 5、打印空心金字塔，在我们给每行打印*时，需要考虑是打印*还是打印空格
	// 分析的结果是，每层第一个和最后一个打* 其余打空格，底层全部打*
	var level int
	fmt.Print("请输入层数：")
	fmt.Scanln(&level)

	for i := 1; i <= level; i++ {     //控制层数
		for m := 1; m <= level - i; m++ {
			fmt.Print(" ")   // "*" 一个单位占3个空格
		}
		for j := 1; j <= 2 * i - 1; j++ {  // 控制每层打印的个数等于层数
			if j == 1 || j == 2 * i - 1 || i == level {   // 第一个、最后一个、以及最后一行打*
				if i == level && j % 2 == 0 {   // 最后一行，隔空，即* * * j为偶数时打印空格
					fmt.Print(" ")
				} else {
					fmt.Print("*")   // 最后一行，j为奇数时打印*
				}
			} else {
				fmt.Print(" ")   // 非最后一行，中间全部镂空
			}	
		}
		fmt.Println()
	}
}